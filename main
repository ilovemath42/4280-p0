#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

#include "node.h"
#include "tree.h"

#define SIZE 270

// ASCII Tree Art Source: https://ascii.co.uk/art/tree
/****************************************************
                           ###
                         ## ####             
                        # #### ###           
                     ## ## ### |/####        
                    ### # #|### |/####       
                   ### ## #||/##/_/###_#     
                 ###  # ###|/ #/ # ###  ##   
                ##_#_##_### | #/###_/_####  
               ## #### # # #| /  #### ##/##` 
                __#_--###`  |{,###---###-~  
                          `'|}{              
                            }}{              
  Build + Print a Tree      }}{              
    Using Traversals        }}{              
*****************************************************/


// FUNCTION FOR INVOCATION 1
char *inputString(FILE* file, size_t size) {
    // the size_t size in function call + size in this function don't matter # from call
    // sets start length and size in here adds to the size stored in the call.
    char *string;
    int c;
    size_t length = 0;
    // using realloc here to return update info with pointers
    string = realloc(NULL, sizeof( *string ) *size); 
    
    if(!string)return string;
    
    while( ( c = fgetc(file) ) != EOF ) {
        // function will run until simulated EOF (ctrl + D)
        string[length++] = c;
        
        if( length == size ) {
            // the if statement will add the amount listed here --vv to the size
            string = realloc(string, sizeof( *string ) * (size += 10));
            if(!string)return string;
        }
    }
    string[length++] = '\0'; //NULL character marks end of string
    //user input/ modified string (and possibly length) is returned for invo 1
    return realloc(string, sizeof( *string ) *length);
}

// FUNCTION FOR INVOCATION 3



int main() {
    printf("Hello Professor Hauschild . . . \n\n");
    printf("To choose how you will input your text, please type one of the invocations below and then hit enter .\n");
    printf("P0");
    printf("          -> Description: Read from keyboard until simulated EOF (Unix: Ctrl + d; Windows: Ctrl + z).\n");
    printf("P0 < [file]");
    printf(" -> Description: will read from file until simulated EOF.\n");
    printf("P0 [file]");
    printf("   -> Description: will read the whole file.\n");
    
    // since # of chars in file names are limited by OS, the size is defined by slightly over the windows allowance
    char invocation[SIZE];
    fgets(invocation, SIZE, stdin);
    
    // if statement to select file input option
    if( invocation[0] == 'P' && invocation[1] == '0' ) {
        char *without_P0 = &invocation[2]; // removing P0 from the line to access file name
        
        int string_length;
        string_length = strlen(without_P0);
        
        char file_extension[] = ".txt"; //only necessary for invo 2 + 3
        
        if( string_length == 1 ) {
            // string length will be always 1 when empty bc NULL terminator
            printf("You have chosen the first invocation; please enter your text.\n");
            
            char *user_string;
            user_string = inputString(stdin, 10);
            buildTree(user_string);
            
        }
        else if( without_P0[1] == '<' ) {
            printf("You have chosen the second invocation. Reading from file...\n");
            // block of code below cleans up user input to turn it into valid file name
            char *file_name = &invocation[5]; 
            strtok(file_name, "\n");
            strcat(file_name, file_extension);
            
            
            
        }
        else {
            printf("You have chosen the third invocation. Reading from file...\n");
            // block of code below cleans up user input to turn it into valid file name
            char *file_name = &invocation[3]; 
            strtok(file_name, "\n"); 
            strcat(file_name, file_extension);
            
            
        }
    }
    else {
        printf("You have entered an invalid invocation. Aborting program, goodbye.\n");
        void abort(void);
    } 
    
    


    return 0;
}

